version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: code_analysis_postgres
    environment:
      POSTGRES_DB: code_analysis_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: "251081"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -h localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - code_analysis_network

  # Redis for caching (optional, for future scalability)
  redis:
    image: redis:7-alpine
    container_name: code_analysis_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - code_analysis_network

  # Code Analysis Agent API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: code_analysis_api
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:251081@postgres:5432/code_analysis_db
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=251081
      - DB_NAME=code_analysis_db
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - DB_TIMEOUT=60
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - code_analysis_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: code_analysis_frontend
    ports:
      - "3000:80"
    depends_on:
      - api
    networks:
      - code_analysis_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - NODE_ENV=production

  # PgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: code_analysis_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "8080:80"
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - code_analysis_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  code_analysis_network:
    driver: bridge